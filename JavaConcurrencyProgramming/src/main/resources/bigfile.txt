文件hash

还有一种比较常见的应用场景是文件hash。如图所示，需要对大文件进行hash以方便后续处理，由于文件太大，所以把文件分给四个线程分别处理，每个线程读取相应信息，计算hash值，写入相应文件。

这样的方法有两个弊端：

同一个线程内，读写相互依赖，互相等待

不同线程可能争夺同一个输出文件，需要lock同步

于是改为如下方法，四个线程读取数据，计算hash值，将信息写入相应disruptor。每个disruptor对应一个消费者，将disruptor中的信息落盘持久化。
对于四个读取线程而言，只有读取文件操作，没有写文件操作，因此不存在读写互相依赖的问题。对于写线程而言，只存在写文件操作，没有读文件，因此也不存在读写互相依赖的问题。
同时disruptor的存在又很好的解决了多个线程互相竞争同一个文件的问题，因此可以大大提高程序的吞吐率。

<https://mp.weixin.qq.com/s/4TxWLKnlmjAJ3-PdFcL-Lg>


ArrayBlockingQueue

disruptor是用于一个JVM中多个线程之间的消息队列，作用与ArrayBlockingQueue有相似之处，但是disruptor从功能、性能都远好于ArrayBlockingQueue，当多个线程之间传递大量数据或对性能要求较高时，可以考虑使用disruptor作为ArrayBlockingQueue的替代者。

官方也对disruptor和ArrayBlockingQueue的性能在不同的应用场景下做了对比，本文列出其中一组数据，数据中P代表producer，C代表consumer，ABS代表ArrayBlockingQueue
官方性能测试数据在Performance Results:<https://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results>


+ 文章举例貌似有问题,多线程读取之后没法分别生成md5再合并,所以还是得全部读取之后,按顺序合并,所以大文件还是分别在多个线程占用内存,总共的内存还是很大



---