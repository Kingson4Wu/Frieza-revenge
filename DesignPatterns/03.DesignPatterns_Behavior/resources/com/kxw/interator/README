迭代器 (Iterator)模式：迭代器模式提供一种方法顺序一个聚合对象中各个元素，而又不暴露该对象内部表示。
迭代器模式由以下角色组成：
迭代器角色(Iterator)：迭代器角色负责定义访问和遍历元素的接口。
具体迭代器角色(Concrete Iterator)：具体迭代器角色要实现迭代器接口，并要记录遍历中的当前位置。
容器角色(Container)：容器角色负责提供创建具体迭代器角色的接口。
具体容器角色(Concrete Container)：具体容器角色实现创建具体迭代器角色的接口。这个具体迭代器角色与该容器的结构相关。
迭代器设计模式结构如如下：

从结构上可以看出，迭代器模式在客户与容器之间加入了迭代器角色。迭代器角色的加入，就可以很好的避免容器内部细节的暴露，而且也使得设计符号“单一职责原则”。



上面的代码基本上模拟了迭代器模式的实现，当然java中已经完整的实现了所有集合的迭代。迭代器的作用就是把集合的管理和迭代算法分离，体现了单一职责原则，这也是这个模式的主要作用。