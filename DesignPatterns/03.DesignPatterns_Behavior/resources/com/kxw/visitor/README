访问者（Visitor）模式：封装一些作用于某种数据结构中的各元素的操作，它可以在不改变这个数据结构的前提下定义作用于这些元素的新的操作。
访问者模式的结构图如下：

 通过上图可以看到他有如下角色：
抽象访问者（Visitor）角色：定义接口，声明一个或多个访问操作。 
具体访问者（ConcreteVisitor）角色：实现抽象访问者所声明的接口，也就是抽象访问者所声明的各个访问操作。 
抽象元素（Visitable）角色：声明一个接受操作，接受一个访问者对象作为一个参数。 
具体元素结点（ConcreteElement）角色：实现抽象结点所规定的接受操作。 
数据结构对象（ObjectStructure）角色：可以遍历结构中的所有元素，提供一个接口让访问者对象都可以访问每一个元素。


 看了很多设计模式的书，讲访问者设计模式都要提到一个概念“双重分派”，所谓“分派”简单理解就是根据类的特性，特征进行选择，这些选择都是程序语言设计的特征，
 比如多态（重载，重写）等等，我个人不太注重概念，只要深入掌握面向对象的基础就很好理解了。
 
设计模式相对其他模式来说结构有点复杂，上面是访问者模式的模拟实现，为了利于学习找了个真实的例子。dom4j里面利用访问者模式来对xml文档进行逐个节点访问，
所有文档的对象的父类接口都是Node，对于不同类型的文档对象又做了不同的抽象，所有可能访问的节点如Visitor类中所示，
dom4j中定义的Visitor接口如下：




我们要解析的XML如下：
Java代码  收藏代码
<?xml version="1.0" encoding="UTF-8"?>  
<table name="test">  
  <rows>  
      <row>  
        <id>1</id>  
        <test>Test</test>  
      </row>  
      <row>  
        <id>2</id>  
        <test>Test2</test>  
      </row>   
 </rows  
</table>  
 我们写个客户端测试，为了简单，把Visitor作为内部类，直接就一个类完成，代码如下：  
Java代码  收藏代码
package com.alaric.dom4j;  
  
import java.io.File;  
  
import org.dom4j.Attribute;  
import org.dom4j.Document;  
import org.dom4j.DocumentException;  
import org.dom4j.Element;  
import org.dom4j.VisitorSupport;  
import org.dom4j.io.SAXReader;  
  
public class Dom4jTest {  
  
  
    public class MyVisitor extends VisitorSupport {  
  
        public void visit(Attribute node){  
          System.out.println("属性 : "+node.getName()+" = "+node.getValue());  
        }  
  
        public void visit(Element node){  
          if(node.isTextOnly()){  
            System.out.println("节点: "+node.getName()+" = "+node.getText());  
          }else{  
            System.out.println("节点："+node.getName());  
          }  
        }  
    }  
  
  
    public static void main(String[] args) throws Exception {  
  
        SAXReader saxReader=new SAXReader();  
        File file=new File("d:\\test.xml");  
        try{  
          Document doc=saxReader.read(file);  
          doc.accept(new Dom4jTest(). new MyVisitor());  
        }catch(DocumentException de){  
          de.printStackTrace();  
        }  
  
    }  
  
}  
 
运行结果：
节点：table
属性 : name = test
节点：rows
节点：row
节点: id = 1
节点: test = Test
节点：row
节点: id = 2
节点: test = Test2
 
可以看出把xml节点顺序的访问了一边。每个人可以根据不同的xml来实现自己的Visitor，不论怎么写都可以遍历出你所有的节点，这就是visitor的厉害之处。
访问者模式也不是万能的，他的缺点是当数据结构变化时，他的visitor接口及其实现都要改变。所以访问者模式不能使用在经常变化的数据接口上。
在Gof的设计模式中,有以下情形可以考虑使用设计模式：
 
1、一个对象结构包含很多类对象，它们有不同的接口，而你想对这些对象实施一些依赖于其具体类的操作。
2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而你想避免让这些操作“污染”这些对象的类。
Visitor使得你可以将相关的操作集中起来定义在一个类中。
3、当该对象结构被很多应用共享时，用Visitor模式让每个应用仅包含需要用到的操作。
4、 定义对象结构的类很少改变，但经常需要在此结构上定义新的操作。改变对象结构类需要重定义对所有访问者的接口，这可能需要很大的代价。
如果对象结构类经常改变，那么可能还是在这些类中定义这些操作较好。
这些个人看来都是建议，项目中还要具体问题具体分析了。


