1. 定义：
将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
2. 

四个要素
产品类：一般是一个较为复杂的对象，也就是说创建对象的过程比较复杂，一般会有比较多的代码量。在本类图中，产品类是一个具体的类，而非抽象类。实际编程中，
产品类可以是由一个抽象类与它的不同实现组成，也可以是由多个抽象类与他们的实现组成。
抽象建造者：引入抽象建造者的目的，是为了将建造的具体过程交与它的子类来实现。这样更容易扩展。一般至少会有两个抽象方法，一个用来建造产品，一个是用来返回产品。
建造者：实现抽象类的所有未实现的方法，具体来说一般是两项任务：组建产品；返回组建好的产品。
导演类：负责调用适当的建造者来组建产品，导演类一般不与产品类发生依赖关系，与导演类直接交互的是建造者类。一般来说，导演类被用来封装程序中易变的部分。
例子：
         通过导演类得到小汽车和公交车这两个车的产品。
         ps: 我把产品类分成了Bus和Car两个产品，但是还是通过一个builder类来进行构建。就是把builder中的setProduct方法用反射来实现
         
         
         
         
         运行结果
Car名: car--Car类型: null
Bus名: bus--Bus类型: null
 
我们发现，当再需要一个产品的时候，只需要添加一个产品类，并且在导演类中添加构造该类的方法，不需要做其它操作了
 
总结
      建造者模式与工厂模式类似，他们都是建造者模式，适用的场景也很相似。一般来说，如果产品很复杂，那么请用工厂模式；如果产品的建造更复杂，那么请用建造者模式。